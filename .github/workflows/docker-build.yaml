# The main purpose of the custom image in this repository is to reduce the time
# that it takes to start developing. This is not just about the tool chain, it is
# also about related packages and gems. We need to keep the image up to date.

# With this workflow we generate a new image whenever a new release is created. We
# intentionally use a release to trigger the workflow, because a maintainer can
# then re-use the trigger whenever meaningful properties have changed.

name: Docker - Build and publish

on:
  workflow_dispatch:
  release:
    types:
      - published

env:
  IMAGE_NAME: "website-news-jekyll-environment"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            src/Gemfile
            src/Gemfile.lock
            Dockerfile
            .dockerignore
            compose.yaml
          sparse-checkout-cone-mode: false

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # We try to retrieve the latest release tag. If we fail for whatever reason then we default to '0.0.0'
      - name: Extract latest release tag
        run: |
          LATEST_TAG=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)

          if [[ "$LATEST_TAG" == "null" || -z "$LATEST_TAG" ]]; then
            LATEST_TAG="0.0.0"
          else
            LATEST_TAG="${LATEST_TAG#v}"  # Remove leading 'v' if it exists
          fi

          echo "VERSION=$LATEST_TAG" >> $GITHUB_ENV

      # Docker only accepts tags that are entirely lower case.
      - name: Normalize image tag
        env:
          REPO_OWNER: ${{ github.repository_owner }}
        run: echo "IMAGE_TAG=ghcr.io/${REPO_OWNER,,}/${{ env.IMAGE_NAME}}" >> $GITHUB_ENV

      # Build the docker image.
      - name: Build the Docker image
        run: |
          docker build -t ${{ env.IMAGE_TAG }}:latest .
          docker tag ${{ env.IMAGE_TAG }}:latest ${{ env.IMAGE_TAG }}:${{ env.VERSION }}

      # Push the docker image to the GitHub Container Repository, or GHCR for short.
      - name: Push the Docker image to GHCR
        run: |
          docker push ${{ env.IMAGE_TAG }}:latest
          docker push ${{ env.IMAGE_TAG }}:${{ env.VERSION }}
